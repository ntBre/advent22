#+startup: overview
* About
  My main solutions are in Rust, but this document holds other solutions, mostly
  in AWK so far
* Table of Contents
  - [[#Day-1][Day 1]]
  - [[#Day-2][Day 2]]
  - [[#Day-3][Day 3]]
  - [[#Day-4][Day 4]]
  - [[#Day-6][Day 6]]
* Day 1
** Bash (mostly awk)
   just change 1q to 3q for part 2
   #+begin_src shell
     awk '/^$/ {print sum; sum = 0}; {sum += $1}; END {print sum}' day1/input \
	 | sort -nr | sed 1q | paste -sd+ | bc -l
   #+end_src
** Just awk
   ~s - 1~ to ~s - 3~ for part 2
   #+begin_src awk :in-file day1/input
     /^$/ {
	 sums[s++] = sum;
	 sum = 0
     }

     {
	 sum += $1
     }

     END {
	 asort(sums)
	 for (i = s; i > s - 1; i--) tot += sums[i]
	 print tot
     }
   #+end_src
* Day 2
** my awk
   #+begin_src awk :in-file day2/input
     BEGIN {
	 hand["A"] = 1 # rock
	 hand["B"] = 2 # paper
	 hand["C"] = 3 # scissors
	 hand["X"] = 1 # rock
	 hand["Y"] = 2 # paper
	 hand["Z"] = 3 # scissors
     }

     function score(a, b) {
	 o = 0
	 t = 0
	 if (a == b) {
	     # draw
	     o += 3
	     t += 3;
	 } else if (a == 1 && b == 2) {
	     t += 6
	 } else if (a == 1 && b == 3) {
	     o += 6
	 } else if (a == 2 && b == 1) {
	     o += 6
	 } else if (a == 2 && b == 3) {
	     t += 6
	 } else if (a == 3 && b == 1) {
	     t += 6
	 } else if (a == 3 && b == 2) {
	     o += 6
	 }
	 o += a
	 t += b
	 return o" "t
     }

     {
	 # t"h"eirs
	 h = hand[$1]
	 # o"u"tcome
	 u = hand[$2]
	 switch (h" "u) {
	 case "2 2":
	 case "1 2":
	 case "3 2":
	     ours = h
	     break;
	 case "1 1":
	     ours = 3
	     break;
	 case "2 1":
	     ours = 1
	     break;
	 case "3 1":
	     ours = 2
	     break;
	 case "1 3":
	     ours = 2
	     break;
	 case "2 3":
	     ours = 3
	     break;
	 case "3 3":
	     ours = 1
	     break;
	 }
	 theirs = h
	 s = score(ours, theirs)
	 split(s, a, " ")
	 o = a[1]
	 t = a[2]
	 # print ours, theirs, o, t
	 tot += o
     }

     END { print tot }
   #+end_src

   #+RESULTS:
   : 13187

** awk after reading [[https://www.reddit.com/r/adventofcode/comments/zac2v2/2022_day_2_solutions/][reddit]]
   you can just write down all of the possible options and look up the answer.
   it could be even shorter if we could initialize a literal array without all
   of the assignments. you can translate this straight to Rust with a
   ~HashMap::from([...])~
   #+begin_src awk :in-file day2/input
     BEGIN {
	 part1["A X"] = 1 + 3; part1["A Y"] = 2 + 6; part1["A Z"] = 3 + 0;
	 part1["B X"] = 1 + 0; part1["B Y"] = 2 + 3; part1["B Z"] = 3 + 6;
	 part1["C X"] = 1 + 6; part1["C Y"] = 2 + 0; part1["C Z"] = 3 + 3;

	 part2["A X"] = 3 + 0; part2["A Y"] = 1 + 3; part2["A Z"] = 2 + 6;
	 part2["B X"] = 1 + 0; part2["B Y"] = 2 + 3; part2["B Z"] = 3 + 6;
	 part2["C X"] = 2 + 0; part2["C Y"] = 3 + 3; part2["C Z"] = 1 + 6;

     }
     {
	 p1 += part1[$1" "$2]
	 p2 += part2[$1" "$2]
     }
     END { print p1; print p2 }
   #+end_src

   #+RESULTS:
   | 11449 |
   | 13187 |

* Day 3
  #+begin_src awk :in-file day3/input
    BEGIN {
    # build a table mapping characters to priorities
	FS = ""
	c = 27
	for (n = 65; n <= 90; n++) priority[sprintf("%c", n)] = c++
	c = 1
	for (n = 97; n <= 122; n++) priority[sprintf("%c", n)] = c++
    }
    {
    # part 1
	delete a
	for (i = 1; i <= NF/2; i++) a[$i] = 1
	for (i = NF/2 + 1; i <= NF; i++)
	    if (a[$i]) {
		tot1 += priority[$i]
		break;
	    }

    # part 2
	if (NR % 3 == 0) {
	    for (i = 1; i <= NF; i++)
		if (r1[$i] && r2[$i]) {
		    tot2 += priority[$i]
		    break;
		}
	    delete r1
	    delete r2
	} else if (NR % 3 == 1 ) {
	    for (i = 1; i <= NF; i++) r1[$i] = 1
	} else if (NR % 3 == 2) {
	    for (i = 1; i <= NF; i++) r2[$i] = 1
	}
    }
    END { print tot1, tot2 }
  #+end_src

  #+RESULTS:
  : 7908 2838

* Day 4
  #+begin_src awk :in-file day4/input
    BEGIN { FS = "," }
    function contains(a, b) {return a[1] >= b[1] && a[2] <= b[2]}
    function contains_any(a, b) {return !(a[1] > b[2] || a[2] < b[1])}
    {
	split($1, a, "-");
	split($2, b, "-");
	sum1 += (contains(a, b) || contains(b, a)) ? 1 : 0
	sum2 += (contains_any(a, b) || contains_any(b, a)) ? 1 : 0
    }
    END { print sum1, sum2 }
  #+end_src

  #+RESULTS:
  : 515 883

* Day 6
  #+begin_src awk :in-file day6/input
    BEGIN { FS = ""; width = 14 }
    {
	for (i = 1; i <= NF-width; i++) {
	    for (j = i; j < i+width; j++) {
		hold[$j] = 1;
	    }
	    if (length(hold) == width) {
		print i+width-1
		exit
	    }
	    delete hold
	}
    }
  #+end_src

  #+RESULTS:
  : 3444

* Day 7
  Not my solution, but the top person's ([[https://github.com/betaveros][betaveros]]) from the leaderboard in his
  language [[https://github.com/betaveros/noulith][noulith]] is pretty cool. I expected that you could ignore constructing
  a real directory tree, but I didn't think actually explore that option in the
  code. It looks like under the assumption that you only list each directory's
  contents once, you can treat the current directory as a stack and push the
  file's size to every directory on the stack. With this, betaveros finished the
  challenge in just over 5 minutes compared to the more than 2 hours in my Rust
  video. I translate his [[https://github.com/betaveros/advent-of-code-2022/blob/9d954fbcc55f97f133edc4d7215a1eb73e1af9be/p7.noul][noulith solution]] to awk here:

  #+begin_src awk :in-file day7/input :results output
    BEGIN {
	# stack pointer since we can't push/pop in awk
	stack[1] = "/"
	p = 2
    }
    $2 ~ /^ls$/ { next }
    $1 ~ /^dir$/ { next }
    $2 ~ /^cd$/ {
	if ($3 == "/") {
	    stack[1] = "/"
	    p = 2
	}
	else if ($3 == "..") p--
	else stack[p++] = $3
	next
    }
    {
	# otherwise we're in a file
	for (i = p-1; i >= 1; i--) {
    if (stack[i] == "ddhfvv") print $0, "adding", sizes[stack[i]]
	    sizes[stack[i]] += $1
	}
    }
    END {
    print "missing: ", sizes["ddhfvv"]
    print "missing: ", sizes["jjshzrhd"]
    for (key in sizes) {
	    size = sizes[key]
	    if (size <= 100000) {
    print size, key
		tot += size
	    }
	}
	print tot
    }
  #+end_src

  #+RESULTS:
  #+begin_example
  56038 gvbzwds.cff adding 
  308363 rdzj.sqr adding 56038
  287177 zznmdh.nhn adding 364401
  128210 btgrv.zqp adding 651578
  205284 dnt.jrd adding 779788
  135774 pmnbbb adding 985072
  292185 zsqz adding 1120846
  277089 bcpdvwqs.dmw adding 1413031
  262922 hghrcqfd.hpn adding 1690120
  95245 vmmcdr adding 1953042
  172326 qsrcb.fpd adding 2048287
  203623 fvhmzqc.dmm adding 2220613
  60280 vmmcdr adding 2424236
  202499 ddhfvv adding 2484516
  265355 ddhfvv.bpb adding 2687015
  244640 nhdztzsg adding 2952370
  28659 glfpm.hnp adding 3197010
  274896 hrtbfww.gts adding 3225669
  228636 zrn.ftn adding 3500565
  237410 djtchhmw.fjz adding 3729201
  209100 hghrcqfd.hpn adding 3966611
  317411 nsgtmddt.jvj adding 4175711
  30033 pbhc.blz adding 4493122
  8818 pwf.vjv adding 4523155
  249328 cwftvdws adding 4531973
  41124 pwmzz adding 4781301
  99884 qbvpslt adding 4822425
  49107 fvhmzqc.slp adding 4922309
  49107 fvhmzqc.slp adding 4971416
  115288 gfdzqrb adding 5020523
  248419 hrtbfww.gts adding 5135811
  14211 qffwlmvm.fhp adding 5384230
  67495 wwttgflg.rcl adding 5398441
  278463 btgrv.ldc adding 5465936
  199548 qwc adding 5744399
  missing:  5943947
  missing:  5798851
  95245 jlbjlzzs
  63581 rrcnhbn
  70881 ncwldt
  67713 mfhbd
  84423 gdc
  76792 smprwhmg
  91244 sdrjlqqm
  43196 lbpmtft
  17068 fjwwn
  60280 wwghpsds
  15584 qhb
  82379 cbcwz
  65889 npdccs
  49107 thwccb
  43196 tlhc
  69494 czqj
  996072
  #+end_example

* Footer
# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
